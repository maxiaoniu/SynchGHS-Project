{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww28380\viewh16500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 SynchGHS Algorithm Pseudocode\
\
Assumption: \
undirected weighted graph,\
n nodes,\
each node has unique id and knows about its neighbors,\
no link failures and processor failures,\
synchronous message passing,\
one master thread can communicate with each node, each node can only communicate with neighbors and master.\
\
Instruction:\
\
Message types:\
Test(component, level, state, id)\
Response(boolean action, id)                    //action ==0, Reject; action == 1, Accept\
Report(id,global_MWOE)\
Merge(level,global_MWOE)\
Connect(id,level, global_MWOE)           \
New_Component(component, level, id)\
Start(round)\
Finish(id,level) \
\
\
For master node:\
State\
round                int                                        0\
gathering         boolean[], size n                all 0 \
//this boolean list is to record the finish message from all the nodes\
G(V,E)   \
\
Message Generation and State Transition\
round = round + 1\
send Start(round) to each thread\
Receiving Finish(id, level)\
         if (level == round +1)\
              update the corresponding element in gathering to 1\
         else \
               throw exception\
While gathering all boolean == 1\
         round = round + 1\
         send Start(round) to each thread\
         gathering all boolean = 0\
\
\
For each node i:\
States\
(Name)                        (data)                     (initial value)\
id                                   int                             uid                                                              \
component                    int                             uid\
level                              int                               0\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 local_MWOE             (int m, int n,int w)         null                                                           //To record the MWOE of this node\
global_MWOE           (int m, int n,int w)         null                                                          //To record the MWOE which this node has ever known\
received_MWOE       list of (int m, int n, int w)        null                                                          //To record the message of MWOE from different component  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 parent                            int                             null                                                         //To record the parent of this node in the spanning forest\
channel_MWOE            int                             null                                                         //To record the channel of the transmitting of the global_MWOE\
neighbor               list of tuple(j,w,state)         input value                                             //state of each neighbor edge belongs to \{basic, branch, reject\}\
 \
Message Generation and State Transition\
\
Receiving Start(round)\
             if (round == level(i) + 1) & (id(i) == component(i))\
                   send Test(component(i), level(i), basic, id(i)) to all the neighbor j with state basic\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0                    send Test(component(i), level(i), branch, id(i)) to all the neighbor j with state branch\
\
Receiving Test(component, level, basic, id)\
              if (component == component(i))\
                    send back Response(0, id(i))\
              else \
                    send back Response(1, id(i))\
\
Receiving Test(component, level, branch, id)\
              parent = id\
              send Test(component(i), level(i), basic) to all the neighbor j with state basic\
              send Test(component(i), level(i), branch) to all the neighbor j with state branch except for parent \
\
Receiving Response(action, id)\
             min_w = infinity\
             min_woe = 0\
             if  action == 0\
                    update the neighbor with id to state reject\
             else \
                    if (w(id(i),id) < min_w)\
                        min_w = w(id(i), id)\
                        local_MWOE = (id(i), id, min_w)\
             if process i has no neighbors with state as branch\
                        global_MWOE = local_MWOE\
                        send Report(id, global_MWOE)\
\
Receiving Report(id, global_MWOE) from all the branch neighbors except for parent\
            //Let Xj to denote the report message from node j\
            \
            if min ( U(Xj) )  <  local_MWOE(i)\
                 channel_MWOE(i) = the id of the minimum incoming message\
                 global_MWOE(i) = local_MWOE\
            else \
                 channel_MWOE(i) = null\
                 global_MWOE(i) = min(U(Xj))\
            if component(i) == id(i)           //component leader\
                 send Merge(level(i), global_MWOE(i)) to channel_MWOE(i)\
            else \
                 send Report(level(i), global_MWOE(i))\
\
Receiving Merge(level, global_MWOE)\
            if local_MWOE(i) = global_MWOE\
                 send send Merge(level(i), global_MWOE(i)) to channel_MWOE(i)\
            else \
                 compare the elements (m, n, w) in global_MWOE\
                 update the neighbor n state from basic to branch\
                 parent(i) = n\
                 if  global_MWOE belongs to received_MWOE \
                        level(i) += 1\
                        send Finish(id(i), level(i)) to master thread\
                        if (m > n)\
                             component(i) = m\
                             parent = null\
                        else\
                             component(i) = n\
                        send New_Component(component(i), level(i), id(i)) to all the neighbors with state as branch except for n\
                 send Connect(id(i), level(i), global_MWOE) to neighbor n\
                \
\
Receiving Connect(id, level, global_MWOE)\
                 add global_MWOE to list received_MWOE(i) \
                 update the neighbor id state from basic to branch\
                 if level(i)+1 == level\
                       level(i) = level\
                       send Finish(id(i), level(i)) to master thread\
                       compare the elements (m, n, w) in global_MWOE\
                       if (m > n)\
                             component(i) = m\
                             parent = m\
                        else\
                             component(i) = n\
                             parent = null\
                       send New_Component(component(i), level(i), id(i)) to all the neighbors with state as branch except for id\
                  else if level(i) == level + 1\
                       send New_Component(component(i), level(i), id(i)) to the neighbor id\
\
Receiving New_Component(component,level,id)\
                 if level(i) +1 ==level\
                     component(i) = component\
                     parent(i) = id\
                     level(i) = level\
                     send Finish(id(i), level(i)) to master thread\
                     send New_Component(component(i), level(i), id(i)) to all the neighbors with state as branch except for id\
\
\
                  \
                \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0                    \
}